FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is Pipefy's API documentation. Here you will find the guidelines for getting started with the API.

# GraphQL

GraphQL is a query language for APIs created by Facebook in 2012.

**Refs**:
* [facebook.github.io/graphql](http://facebook.github.io/graphql/)
* [graphql.org](http://graphql.org/)

Features:
* Send a GraphQL query to the API and get exactly what you need, nothing more and nothing less. GraphQL queries always return predictable results. 
* GraphQL queries access not just the properties of one resource but also smoothly follow references between them. While typical REST APIs require loading from multiple URLs, GraphQL APIs get all the data your app needs in a single request.

After authenticating to [Pipefy](https://app.pipefy.com/), you can explore the API through the following web interface:

[app.pipefy.com/graphiql](https://app.pipefy.com/graphiql)
![GraphiQL](https://raw.githubusercontent.com/pipefy/graphql-api-doc/master/pipefy_graphiql.png?token=ABKZf10D3_5J8dtbHbVupQQ9XTfVqGFHks5YzKrWwA%3D%3D)

# Authentication (OAuth / JWT)

Most requests will require the OAuth Token, that must be sent in the request header.

The personal OAuth Token can be found at the **User Settings** page on [Pipefy](https://app.pipefy.com)

|HTTP Header      | Header Value              |
|-----------------|---------------------------|
|Content-Type     | _application/json_        |
|**Authorization**|_Bearer <your_oauth_token>_|

**Refs**:
* [OAuth 2](https://oauth.net/2/)
* [JWT](https://jwt.io/introduction/)


# GraphQL Root Queries
* Me (User info)
* Organizations (**Optional** parameter: Organizations IDs)
* Organization (**Required** parameter: Organization ID)
* Pipes (**Required** parameter: Pipes ID)
* Pipe (**Required** parameter: Pipe ID)
* Phase (**Required** parameter: Phase ID)
* Cards (**Required** parameter: Pipe ID)
* Card (**Required** parameter: Card ID)

# GraphQL Root Mutations
* Create organization (**Required** parameters: industry, name)
* Update organization (**Required** parameters: organization id, name)
* Delete organization (**Required** parameter: organization id)
* Clone pipe (**Required** parameters: organization id, pipe templates ids)
* Create pipe (**Required** parameters: organization id, name)
* Update pipe (**Required** parameters: pipe id, name)
* Delete pipe (**Required** parameter: pipe id)
* Create phase (**Required** parameters: pipe id, name)
* Update phase (**Required** parameters: phase id, name)
* Delete phase (**Required** parameter: phase id)
* Create phase field (**Required** parameters: phase id, type id, label, index)
* Update phase field (**Required** parameters: phase field id, label, index)
* Delete phase field (**Required** parameter: phase field id)
* Create label (**Required** parameters: pipe id, name, color)
* Update label (**Required** parameters: label id, name, color)
* Delete label (**Required** parameter: label id)
* Create card (**Required** parameter: pipe id)
* Update card (**Required** parameter: card id)
* Delete card (**Required** parameter: card id)
* Move card to phase (**Required** parameters: card id, destination phase id)
* Update cardfield (**Required** parameter: card field id)
* Create comment (**Required** parameters: card id, text)
* Update comment (**Required** parameters: comment id, text)
* Delete comment (**Required** parameter: comment id)
* Set role (**Required** parameter: member's)

# Root Queries

## Me [/queries{?me}]

Get information about yourself.

- user:
    - id
    - name
    - username
    - avatar url
    - email
    - locale
    - time zone

**Request Body**

```
{ 
    query: { 
        me { id, name, username, avatar_url, email, locale, time_zone }
    }
}
```

### Get Me [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ me { id, name, username, avatar_url, email, locale, time_zone } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "me": {
                        "id": 9999,
                        "name": "Pipefy User",
                        "username": "pipefy.user",
                        "avatar_url": "https://avatar-images.pipefy.com/user-avatar.png",
                        "email": "pipefy.user@pipefy.com",
                        "locale": "en-US",
                        "time_zone": "America/Los_Angeles"
                    }
                }
            }

## Organizations [/queries{?organizations}]

Get the list of Organizations.

- organizations:
    - id
    - name

**Request Body**
```
{ 
    query: { 
        organizations { id, name } 
    }
}
```

### Get organizations [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ organizations{ id, name} }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organizations": [
                        {
                            "id": "9999",
                            "name": "Pipefy"
                        }
                    ]
                }
            }

## Organization [/queries{?organization}]

Get an organization by organization id, with pipes and phases.

- organization:
    - name
    - pipes:
        - name
        - phases:
            - name

**Request Body**
```
{ 
    query: { 
        organization(id: 9999) { 
            name
            pipes { 
                name
                phases { name } 
            } 
        } 
    } 
}
```

### Get organization by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ organization(id: 1){ name, pipes { name, phases { name } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "organization": {
                        "name": "Pipefy",
                        "pipes": [
                            {
                                "name": "Developers Team",
                                "phases": [
                                    {
                                        "name": "ToDo"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            },
                            {
                                "name": "Sales Team",
                                "phases": [
                                    {
                                        "name": "To-do"
                                    },
                                    {
                                        "name": "Doing"
                                    },
                                    {
                                        "name": "Done"
                                    }
                                ]
                            }
                        ]
                    }
                }
            }

## Pipes [/queries{?pipes}]

Get pipes by pipes ids, with phases and cards.

- pipes:
    - id
    - name
    - phases:
        - name
        - cards ([Relay connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
            - edges:
                - node (cards):
                    - id (card id)
                    - title (card title)

**Request Body**
```
{
    query: {
        pipes(ids: [1]){
            id
            name
            phases{
                name
                cards(first: 10){
                    edges{
                        node{
                            id
                            title
                        }
                    }
                }
            }
        }
    }
}
```

### Get pipes by ids [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ pipes(ids: [1]){ id, name, phases{ name, cards(first: 10){ edges{ node{ id, title } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "pipes": [
                        {
                            "id": "1",
                            "name": "Developers Team",
                            "phases": [
                                {
                                    "name": "To-Do",
                                    "cards": {
                                        "edges": [
                                            {
                                                "node": {
                                                    "id": "4",
                                                    "title": "Tuning API Cache"
                                                }
                                            },
                                            {
                                                "node": {
                                                    "id": "5",
                                                    "title": "Measure API Performance =D"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Doing",
                                    "cards": {
                                        "edges": [
                                            {   
                                                "node": {
                                                    "id": "3",
                                                    "title": "Create API Documentation ;-)"
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "name": "Done",
                                    "cards": {
                                        "edges": [
                                            {
                                                "node": {
                                                    "id": "2",
                                                    "title": "Improve API"
                                                }
                                            },
                                            {
                                                "node": {
                                                    "id": "1",
                                                    "title": "Measure API Performance =/"
                                                }
                                            }
                                        ]
                                    }
                                }
                            ]
                        }
                    ]
                }
            }

## Pipe [/queries{?pipe}]

Get a pipe by pipe id, with phases and cards.

- pipe:
    - id
    - name
    - phases:
        - name
        - cards ([Relay connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
            - edges:
                - node (cards):
                    - id (card id)
                    - title (card title)

**Request Body**
```
{
    query: {
        pipe(id: 1){
            id
            name
            phases{
                name
                cards(first: 1){
                    edges{
                        node{
                            id
                            title
                        }
                    }
                }
            }
        }
    }
}
```

### Get pipe by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ pipe(id: 1){ id, name, phases{ name, cards(first: 1){ edges{ node{ id, title } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "pipe": {
                        "id": "1",
                        "name": "Developers Team",
                        "phases": [
                            {
                                "name": "To-Do",
                                "cards": {
                                    "edges": [
                                        {
                                            "node": {
                                                "id": "4",
                                                "title": "Tuning API Cache"
                                            }
                                        },
                                        {
                                            "node": {
                                                "id": "5",
                                                "title": "Measure API Performance =D"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Doing",
                                "cards": {
                                    "edges": [
                                        {   
                                            "node": {
                                                "id": "3",
                                                "title": "Create API Documentation ;-)"
                                            }
                                        }
                                    ]
                                }
                            },
                            {
                                "name": "Done",
                                "cards": {
                                    "edges": [
                                        {
                                            "node": {
                                                "id": "2",
                                                "title": "Improve API"
                                            }
                                        },
                                        {
                                            "node": {
                                                "id": "1",
                                                "title": "Measure API Performance =/"
                                            }
                                        }
                                    ]
                                }
                            }
                        ]
                    }
                }
            }

## Phase [/queries{?phase}]

Get a phase by phase id, with cards, fields and cards cane be moved to phases.

- phase:
    - id
    - name
    - cards count
    - cards ([Relay connections specs](https://facebook.github.io/relay/docs/graphql-connections.html)):
        - edges:
            - node (cards):
                - id (card id)
                - title (card title)
    - fields:
        - id
    - cards can be moved to phases:
        - id
        - name

**Request Body**
```
{
    query: {
        phase(id: 2) {
            id
            name
            cards_count
            cards(first: 1) {
                edges {
                    node {
                        id
                        title
                    }
                }
            }
            fields { id }
            cards_can_be_moved_to_phases {
                id
                name
            }
        }
    }
}
```

### Get phase by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{  phase(id: 2){ id name cards_count cards { edges{ node{ id, title } } } fields { id } cards_can_be_moved_to_phases { id name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "phase": {
                        "id": "2",
                        "name": "Doing",
                        "cards_count": 2,
                        "cards": {
                            "edges": [
                                {
                                    "node": {
                                        "id": "1"
                                        "title": "My new card"
                                    }
                                },
                                {
                                    "node": {
                                        "id": "2"
                                        "title": "The second Card"
                                    }
                                }
                            ]
                        },
                        "fields": [
                            {
                                "id": "paid_value"
                            },
                            {
                                "id": "return_value"
                            },
                        ],
                        "cards_can_be_moved_to_phases": [
                            {
                                "id": 4,
                                "name": "To do"
                            },
                            {
                                "id": 5,
                                "name": "Waiting review"
                            }
                        ]
                    }
                }
            }

## Cards [/queries{?cards}]

Get cards by pipe id, with assignees, child relations, fields ...

- cards (pipe id):
    - edges:
        - node (cards):
            - title (card title)
            - assignees:
                - id
                - username
            - child relations:
                - name
                - cards
            - fields:
                - name
                - value
                - phase field

**Request Body**
```
{
    query: {
        cards(pipe_id: 1){
            edges{
                node{
                    title
                    assignees{ id, username }
                    child_relations {
                        name
                        cards { id }
                    }
                    fields {
                        name
                        value
                        phase_field { id }
                    }
                }
            }
        }
    }
}
```

### Get cards by pipe id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ cards(pipe_id: 1) { edges { node { title assignees { id, username } child_relations { name, cards { id } } fields { name, value, phase_field { id } } } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "cards": {
                        "edges": [
                            {
                                "node": {
                                    "title": "Bug: Server was deleted",
                                    "assignees": [
                                        {
                                            "id": "6",
                                            "username": "john"
                                        },
                                        {
                                            "id": "8",
                                            "username": "mary"
                                        }
                                    ],
                                    "child_relations": [
                                        {
                                            "name": "Subtasks",
                                            "cards": []
                                        }
                                    ]
                                    "fields": [
                                        {
                                            "name": "Paid Value",
                                            "value": "0",
                                            "phase_field": {
                                                "id": "paid_value"
                                            }
                                        },
                                        {
                                            "name": "Customer Name",
                                            "value": "Mr. Page",
                                            "phase_field": {
                                                "id": "customer_name"
                                            }
                                        },
                                        {
                                            "name": "Customer Email",
                                            "value": "jimmy_page@guitar.com",
                                            "phase_field": {
                                                "id": "customer_email"
                                            }
                                        },
                                    ]
                                }
                            },
                        ]
                    }
                }
            }

## Card [/queries{?card}]

Get a card by card id, with assignees, child relations, fields ...

- card:
    - title (card title)
    - assignees:
        - id
        - username
    - child relations:
        - name
        - cards
    - fields:
        - name
        - value
        - phase field

**Request Body**
```
{
    query: {
        card(id: 2){
            title
            assignees{ id, username }
            child_relations {
                name
                cards { id }
            }
            fields {
                name
                value
                phase_field { id }
            }
        }
    }
}
```

### Get card by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "{ card(id: 2) { title assignees { id, username } child_relations { name, cards { id } } fields { name, value, phase_field { id } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "card": {
                        "title": "Bug 2: Wrong Label",
                        "assignees": [
                            {
                                "id": "6",
                                "username": "john"
                            },
                            {
                                "id": "8",
                                "username": "mary"
                            }
                        ],
                        "child_relations": [
                            {
                                "name": "Subtasks",
                                "cards": []
                            }
                        ]
                        "fields": [
                            {
                                "name": "Paid Value",
                                "value": "0",
                                "phase_field": {
                                    "id": "paid_value"
                                }
                            },
                            {
                                "name": "Customer Name",
                                "value": "Robert Plant",
                                "phase_field": {
                                    "id": "customer_name"
                                }
                            },
                            {
                                "name": "Customer Email",
                                "value": "robert_plant@vocal.com",
                                "phase_field": {
                                    "id": "customer_email"
                                }
                            },
                        ]
                    }
                }
            }



# Root Mutations

## Create organization [/queries{?create_organization}]

Mutation to create a organization, in case of success a query is returned.

- organization's parameters:
    - industry
    - name

**Request Body**

```
mutation { 
    createOrganization(input: {industry: "technology", name: "Oscorp"}){
        organization{ 
            id
            name
        }
    }
}
```

### createOrganization(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { createOrganization(input: {industry: \"technology\", name: \"Oscorp\"}){ organization{ id, name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createOrganization": {
                        "organization": {
                            "id": "1",
                            "name": "Oscorp"
                        }
                    }
                }
            }

## Update organization [/queries{?update_organization}]

Mutation to update a organization, in case of success a query is returned.

- organization's parameters:
    - organization id
    - name
    - only admin can invite users
    - only admin can create pipes
    - force omniauth to normal users

**Request Body**
```
mutation{
    updateOrganization(
        input: {
            id: 5, 
            name: "Capsule Corp.", 
            only_admin_can_invite_users: true 
        }
    ) 
    {
        organization{
            name
            only_admin_can_create_pipes
            only_admin_can_invite_users
            force_omniauth_to_normal_users
        }
    }
}
```

### updateOrganization(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updateOrganization(input:{id: 5, name: \"Capsule Corp.\", only_admin_can_invite_users: true }) { organization{ name, only_admin_can_create_pipes, only_admin_can_invite_users, force_omniauth_to_normal_users } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateOrganization": {
                        "organization": {
                            "name": "Capsule Corp.",
                            "only_admin_can_create_pipes": false,
                            "only_admin_can_invite_users": true,
                            "force_omniauth_to_normal_users": null
                        }
                    }
                }
            }

## Delete organization [/queries{?delete_organization}]

Mutation to delete an organization, in case of success a query is returned.

- parameter:
    - organization id

**Request Body**
```
mutation {
    deleteOrganization(input: {id: 1}) {
        success
    }
}
```

### deleteOrganization(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deleteOrganization(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deleteOrganization": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Clone pipe [/queries{?clone_pipe}]

Mutation to clone a pipe, in case of success a query is returned.

- parameters:
    - organization id
    - pipe template ids

**Request Body**

```
mutation { 
    clonePipes(input: {organization_id: 1, pipe_template_ids:[1, 2, 3]}){
        pipes{ id, name } 
    }
}
```

### clonePipe(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ clonePipes(input: {organization_id: 1, pipe_template_ids:[1, 2, 3]}){ pipes{ id, name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "clonePipes": {
                        "pipes": [
                            {
                                "id": "1",
                                "name": "Pizza Order (copy 1)"
                            }
                        ]
                    }
                }
            }

## Create pipe [/queries{?create_pipe}]

Mutation to create a pipe, in case of success a query is returned.

- phasefield's parameters:
    - organization id
    - name
    - labels:
        - name
        - color
    - members:
        - user id
        - role name
    - start form fields:
        - phase id
        - type id
        - label
        - default value
        - options
        - description
        - required
        - help
        - editable
        - can create database record
        - can have multiple database records
        - database field layout
        - sync with card
    - phases:
        - name
        - done

**Request Body**

```
mutation{
    createPipe(
        input: {
            organization_id: 5,
            name: "Flying Project",
            labels:[
                {
                    name: "Single Label",
                    color:"#FF0044"
                }
            ],
            members:[
                { 
                  user_id: 3,
                  role_name: "admin"
                }
            ],
            phases:[
                { name:"Building"},
                { name: "Built", done: true}
            ],
            start_form_fields:[
                {
                    label: "Label of Fly Proj.",
                    type_id: "phone"
                }
            ]
        }
    )
    {
        pipe{
            name
            members{ user{ username } }
            phases{ name }
            start_form_fields { id }
        }
    }
}
```

### createPipe(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ createPipe( input: { organization_id: 5, name: \"Flying Project\", labels:[ { name: \"Single Label\", color:\"#FF0044\" } ], members:[ { user_id: 3, role_name: \"admin\" } ], phases:[ { name:\"Building\"}, { name: \"Built\", done: true} ], start_form_fields:[ { label: \"Label of Fly Proj.\", type_id: \"phone\" } ] } ) { pipe{ name, members{ user{ username } } phases{ name } start_form_fields { id } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createPipe": {
                        "pipe": {
                            "name": "Flying Project",
                            "members": [
                                {
                                    "user": {
                                        "username": "obama"
                                    }
                                },
                                {
                                    "user": {
                                        "username": "john"
                                    }
                                }
                            ],
                            "phases": [
                                {
                                    "name": "Building"
                                },
                                {
                                    "name": "Built"
                                }
                            ],
                            "start_form_fields": [
                                {
                                    "id": "label_of_fly_proj"
                                }
                            ]
                        }
                    }
                }
            }

## Update pipe [/queries{?update_pipe}]

Mutation to update a pipe, in case of success a query is returned.

- pipe's parameters:
    - id
    - name
    - icon
    - title field id
    - expiration time by unit
    - expiration unit
    - public
    - only assignees can edit cards
    - only admin can remove cards
    - anyone can create card

**Request Body**
```
mutation{
    updatePipe(
        input:{ 
            id: 1, 
            name: "Pizza Order", 
            anyone_can_create_card: true, 
            public: true, 
            only_admin_can_remove_cards: true, 
            only_assignees_can_edit_cards: true
        }
    )
    {
        pipe{
            name
            public
            only_assignees_can_edit_cards
            only_admin_can_remove_cards
            title_field{ id, synced_with_card }     
        }
    }
}
```

### updatePipe(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updatePipe(input:{ id: 1, name: \"Pizza Order\", anyone_can_create_card: true, public: true, only_admin_can_remove_cards: true, only_assignees_can_edit_cards: true}) { pipe{ name public only_assignees_can_edit_cards only_admin_can_remove_cards title_field{ id synced_with_card } } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updatePipe": {
                        "pipe": {
                            "name": "Pizza Order",
                            "public": true,
                            "only_assignees_can_edit_cards": true,
                            "only_admin_can_remove_cards": true,
                            "title_field": {
                                "id": "customer_name",
                                "synced_with_card": false
                            }
                        }
                    }
                }
            }

## Delete pipe [/queries{?delete_pipe}]

Mutation to delete a pipe, in case of success a query is returned.

- parameter:
    - pipe id

**Request Body**
```
mutation {
    deletePipe(input: {id: 1}) {
        success
    }
}
```

### deletePipe(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deletePipe(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "deletePipe": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Create phase [/queries{?add_phase}]

Mutation to create a phase in a pipe, in case of success a query is returned.

- parameters:
    - pipe id
    - name
    - done
    - lateness time
    - description
    - only admin can move to previous
    - can receive card directly from draft

**Request Body**

```
mutation { 
    createPhase(
        input: {
            pipe_id: 1, 
            name: "To be Finished", 
            description: "This phase is to be used for cards that are to be finished",
            done: true, 
            only_admin_can_move_to_previous: true,
            can_receive_card_directly_from_draft: false
            
        }
    ) 
    { phase{ name } }
}
```

### createPhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { createPhase(input: {pipe_id: 1, name: \"To be Finished\", description: \"This phase is to be used for cards that are to be finished\", done: true, only_admin_can_move_to_previous: true, can_receive_card_directly_from_draft: false}) { phase{ name } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createPhase": {
                        "phase": {
                            "name": "To be Finished"
                        }
                    }
                }
            }

## Update phase [/queries{?update_phase}]

Mutation to update a phase, in case of success a query is returned.

- phase's parameters:
    - phase id
    - name
    - done
    - lateness time
    - description
    - only admin can move to previous
    - can receive card directly from draft

**Request Body**
```
mutation{
    updatePhase(
        input: {
            id: 2, 
            name: "Available to test", 
            only_admin_can_move_to_previous: false, 
            can_receive_card_directly_from_draft: true, 
            description: "I'm editing this phase"
        }
    )
    {
        phase{
            name
            cards_count
            cards{ edges{ node{ title } } }
            cards_can_be_moved_to_phases{ id, name }
        }
    }
}
```

### updatePhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updatePhase(input:{id: 2, name: \"Available to test\", only_admin_can_move_to_previous: false, can_receive_card_directly_from_draft: true, description: \"I'm editing this phase\"  }) { phase{ name, cards_count, cards{ edges{ node{ title } } }, cards_can_be_moved_to_phases{ id, name } } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updatePhase": {
                        "phase": {
                            "name": "Available to test",
                            "cards_count": 1,
                            "cards": {
                                "edges": [
                                    {
                                        "node": {
                                            "title": "Draft"
                                        }
                                    }
                                ]
                            },
                            "cards_can_be_moved_to_phases": [
                                {
                                    "id": "3",
                                    "name": "Prepare"
                                },
                                {
                                    "id": "4",
                                    "name": "Delivered"
                                }
                            ]
                        }
                    }
                }
            }

## Delete phase [/queries{?delete_phase}]

Mutation to delete a phase of a pipe, in case of success a query is returned.

- parameter:
    - phase id

**Request Body**
```
mutation {
    deletePhase(input: {id: 1}) {
        success
    }
}
```

### deletePhase(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deletePhase(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deletePhase": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Create phase field [/queries{?create_phase_field}]

Mutation to create a phase field, in case of success a query is returned.

- phasefield's parameters:
    - phase id
    - type id
    - label
    - index
    - default value
    - options
    - description
    - required
    - help
    - editable
    - can create database record
    - can have multiple database records
    - database field layout
    - sync with card

**Request Body**

```
mutation { 
    createPhaseField(
        input: {
            phase_id: 2,
            type_id: "phone",
            label: "Customer Phone",
            index: 1.0,
            description: "Customer phone field",
            required: true,
            help: "Fill up with customer phone number",
            editable: false,
            can_create_database_record: false,
            can_have_multiple_database_records: false,
            sync_with_card: false
        }
    )
    {
        phase_field{
            id
            type
            description
            phase{ name }
        }
    }
}
```

### createPhaseField(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ createPhaseField(input: { phase_id: 4, type_id: \"phone\", label: \"Customer Home Phone \", index: 1.0, description: \"Customer Home phone field\", required: true, help: \"Fill up with customer home phone number\", editable: false, can_create_database_record: false, can_have_multiple_database_records: false, sync_with_card: false } ) { phase_field{ id, type, description, phase{ name } } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createPhaseField": {
                        "phase_field": {
                            "id": "customer_home_phone",
                            "type": "phone",
                            "description": "Customer Home phone field",
                            "phase": {
                                "name": "Delivery"
                            }
                        }
                    }
                }
            }

## Update phase field [/queries{?update_phase_field}]

Mutation to update a phase field, in case of success a query is returned.

- phase field's parameters:
    - phase id
    - name
    - done
    - lateness time
    - description
    - only admin can move to previous
    - can receive card directly from draft

**Request Body**
```
mutation{
    updatePhaseField(
        input:{
            id: "paid_value", 
            index: 1.1, 
            label: "Paid Value R$", 
            required: false,
            editable: false,
            help: "Fill this field with paid value (R$)",
            description: "The Paid Value with currency symbol",
            sync_with_card: true
        }
    )
    { 
        phase_field{ 
            id,
            label,
            required,
            description,
            synced_with_card,
            phase{ name }
        }
    }
}
```

### updatePhaseField(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { updatePhaseField(input: {id: \"paid_value\", index: 1.1, label: \"Paid Value R$\", required: false, editable: false, help: \"Fill this field with paid value (R$)\", description: \"The Paid Value with currency symbol\", sync_with_card: true}) { phase_field { id label required description synced_with_card phase { name } } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updatePhaseField": {
                        "phase_field": {
                            "id": "paid_value",
                            "label": "Paid Value R$"
                            "required": false,
                            "description": "The Paid Value with currency symbol",
                            "synced_with_card": false,
                            "phase": {
                                "name": "Payment"
                            }
                        }
                    }
                }
            }

## Delete phase field [/queries{?delete_phase_field}]

Mutation to delete a phase field, in case of success a query is returned.

- parameter:
    - phase field id

**Request Body**
```
mutation {
    deletePhaseField(input: {id: 1}) {
        success
    }
}
```

### deletePhaseField(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deletePhaseField(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deletePhaseField": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Create label [/queries{?create_label}]

Mutation to create a label, in case of success a query is returned.

- parameters:
    - pipe id
    - name
    - color

**Request Body**

```
mutation { 
    createLabel(input: {pipe_id: 5, name: "My label", color: "#000000"}){
        label{ 
            id
            name
            color
        }
    }
}
```

### createLabel(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { createLabel(input: {pipe_id: 5, name: \"My label\", color: \"#FFFF00\"}){ label{ id, name, color } } }" }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "data": {
                    "createLabel": {
                        "label": {
                            "id": "1",
                            "name": "My label",
                            "color": "#000000"
                        }
                    }
                }
            }

## Update label [/queries{?update_label}]

Mutation to update a label, in case of success a query is returned.

- label's parameters:
    - label id
    - name
    - color

**Request Body**
```
mutation {
    updateLabel(input:{id: 12, color: "#000000", name: "Changed Name Label"}){
        label{ name, color }
    }
}
```

### updateLabel(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { updateLabel(input:{id: 12, color: \"#000000\", name: \"Changed Name Label\"}){ label{ name, color } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateLabel": {
                        "label": {
                            "name": "Changed Name Label",
                            "color": "#000000"
                        }
                    }
                }
            }

## Delete label [/queries{?delete_label}]

Mutation to delete a label, in case of success a query is returned.

- parameter:
    - label id

**Request Body**
```
mutation {
    deleteLabel(input: {id: 1}) {
        success
    }
}
```

### deleteLabel(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deleteLabel(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deleteLabel": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Create card [/queries{?create_card}]

The endpoint to create a card, in case of success a query is returned. When `fields_attributes` is passed as parameter, the `field_value` of first field_attribute replaces the card title. 

- card's parameters:
    - pipe id
    - title
    - due date
    - assignee ids
    - fields attributes:
        - field id
        - field value
    - label ids
    - parent ids

**Request Body**
```
mutation {
    createCard(input: {
                pipe_id: 1, 
                title: "Card created by a mutation", 
                due_date: "2017-01-15T09:05:06-02:00", 
                assignee_ids: [7], 
                fields_attributes: {
                    field_id: "label_name",
                    field_value: "This is a Field Value"
                }, 
                label_ids: [1]
            }
        )
    {
        card{
            id
            title
            due_date
            assignees { id, username } 
            labels { id, name }
            fields { name, value }
        }
    }
}
```

### createCard(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ createCard(input: {pipe_id: 1, title: \"My card created by mutation\", assignee_ids: [6], fields_attributes:{field_id: \"label_name\", field_value: \"Charlie\"}}) { card {id, title, due_date, assignees{id, username}, fields {name, value} }}}" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "createCard": {
                        "card": {
                            "id": "32",
                            "title": "Charlie",
                            "due_date": "2017-01-15T09:05:06-02:00",
                            "assignees":[
                                {
                                    "id": "7",
                                    "username": "beth"
                                },
                                {
                                    "id": "8",
                                    "username": "mary"
                                }
                            ],
                            "fields":[
                                {
                                    "name": "Customer Name",
                                    "value": "Charlie"
                                }
                            ]
                        }
                    }
                }
            }

## Update card [/queries{?update_card}]

The endpoint to update a card, in case of success a query is returned. 

- card's parameters: 
    - card id
    - title
    - due date
    - assignee ids
    - label ids

**Request Body**
```
mutation {
    updateCard(input: 
        {
            id: 6, 
            title: "New Title", 
            due_date: "2017-01-10T11:15:06-02:00", 
            assignee_ids: [5], 
            label_ids: [2]
            }
    )
    {
        card {
            title
            due_date
            assignees { id, username }
            labels { id, name }
        }
    }
}
```

### updateCard(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updateCard(input: {id: 6, title: \"New Title\", due_date: \"2017-01-10T11:15:06-02:00\", assignee_ids: [6], label_ids: [2]}) { card { title, due_date, assignees { id, username }, labels{ id, name }}}}" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateCard": {
                        "card": {
                            "title": "New Title",
                            "due_date": "2017-01-10T11:15:06-02:00",
                            "assignees": [
                                {
                                    "id": "6",
                                    "username": "john"
                                }
                            ],
                            "labels": [
                                {
                                    "id": "2",
                                    "name": "new label"
                                }
                            ]
                        }
                    }
                }
            }

## Delete card [/queries{?delete_card}]

The endpoint to delete a card, in case of success a query `"success": true` is returned. 

- card's parameter:
    - card id

**Request Body**
```
mutation {
    deleteCard(input: { id: 1} ) {
        success
    }
}
```

### deleteCard(input: card_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ deleteCard(input: {id: 42}) { success } }" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "deleteCard": {
                        "success": true
                    }
                }
            }

## Move card to phase [/queries{?move_card_to_phase}]

The endpoint to move a card to a phase, in case of success a card's query is returned. 

- parameters: 
    - card id
    - destination phase id

**Request Body**
```
mutation {
    moveCardToPhase(input: {card_id: 1, destination_phase_id: 3}) {
        card{
            title
            current_phase{ id, name }
        }
        
    }
}
```

### moveCardToPhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ moveCardToPhase(input: {card_id: 15, destination_phase_id: 2}){ card{ title, current_phase{ id, name } } } }" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "moveCardToPhase": {
                        "card": {
                            "title": "Bug 1: System Error",
                            "current_phase": {
                              "id": "2",
                              "name": "Delivery"
                            }
                        }
                    }
                }
            }

## Update card field [/queries{?update_card_field}]

Mutation to update a card field, in case of success a query is returned.

- card field's parameters:
    - field id
    - card id
    - new value

**Request Body**
```
mutation {
    updateCardField(input:{card_id: 38, field_id: "paid_value", new_value: 9.35}){
        card {
            title
            current_phase { 
                name
                fields{ id, label}
            }
            fields { name, value }
        }
    }
}
```

### updateCardField(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updateCardField(input:{card_id: 38, field_id: \"paid_value\", new_value: "9.32"}){ card{ title, current_phase { name, fields {id, label} }, fields{ name, value } } } }" }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateCardField": {
                        "card": {
                            title": "Product 1",
                            "current_phase": {
                                "name": "Delivery"
                                "fields": [
                                    {
                                        "id": "paid_value",
                                        "label": "Paid Value"
                                    }
                                ],
                            }
                            "fields": [
                                {
                                    "name": "Paid Value",
                                    "value": "9.32"
                                }
                            ]
                        }
                    }
                }
            }

## Create comment [/queries{?add_comment}]

Mutation to create a comment to a card, in case of success a query is returned.

- parameters:
    - card id
    - text

**Request Body**
```
mutation {
    createComment(input: {card_id: 15, text: "PipeFy is awesome! And I added this comment"}) {
        comment { text }
    }
}
```

### createComment(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { createComment(input: {card_id: 15, text: \"PipeFy is awesome! And I added this comment\"}) { comment { text } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "createComment": {
                        "card": {
                            "comment": {
                                "text": "PipeFy is awesome! And I added this comment"
                            }
                        }
                    }
                }
            }

## Update comment [/queries{?update_comment}]

Mutation to update a comment, in case of success a query is returned.

- comment's parameters:
    - comment id
    - text

**Request Body**
```
mutation {
    updateComment(input: {id: 2, text: "Edit: I'm editing this comment"}) {
        comment{
            author_name
            text
        }
    }
}
```

### updateComment(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation{ updateComment(input: {id: 2, text: \"Edit: I'm editing this comment\"}){ comment { author_name, text } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "updateComment": {
                        "comment": {
                            "author_name": "John",
                            "text": "Edit: I'm editing this comment"
                        }
                    }
                }
            }

## Delete comment [/queries{?delete_comment}]

Mutation to delete a comment of a Card, in case of success a query is returned.

- parameter:
    - comment id

**Request Body**
```
mutation {
    deleteComment(input: {id: 1}) {
        success
    }
}
```

### deleteComment(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { deleteComment(input: {id: 1}) { success } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                     "deleteComment": {
                        "card": {
                            "success": true
                        }
                    }
                }
            }

## Set role [/queries{?set_role}]

Mutation to set a user's role, in case of success a query is returned.

- parameters:
    - organization id
    - pipe id
    - member:
        - user id
        - role name

**Request Body**
```
mutation {
    setRole(
        input: {
            pipe_id: 5, 
            organization_id: 1, 
            member: { user_id: 4, role_name: "member" } 
        }
    ) 
    {
        member{
            role_name
            user{ username }
        }
    }
}
```

### setRole(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_oauth_token

    + Body

            { "query": "mutation { setRole(input: {pipe_id: 5, organization_id: 1, member: {user_id: 4, role_name: \"member\" } }) { member{ role_name, user{ username } } } }" }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
                "data": {
                    "setRole": {
                        "member": {
                            "role_name": "member",
                            "user": {
                                "username": "dioguinho" 
                            }
                        }
                    }
                }
            }
